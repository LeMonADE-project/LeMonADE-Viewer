/*--------------------------------------------------------------------------------
 _______________
|   /       \   | L   attice-based  | LeMonADE-Viewer:
|  /   ooo   \  | e   xtensible     | ----------------
| /  o\.|./o  \ | Mon te-Carlo      | An Open Source Visualization Tool for
|/  o\.\|/./o  \| A   lgorithm and  | for BFM-files generated by LeMonADE-software.
|  oo---0---oo  | D   evelopment    | See: https://github.com/LeMonADE-project/LeMonADE
|\  o/./|\.\o  /| E   nvironment    |
| \  o/.|.\o  / | -                 |
|  \   ooo   /  | Viewer            | Copyright (C) 2013-2015 by
|___\_______/___|                   | LeMonADE-Viewer Principal Developers (see AUTHORS)
----------------------------------------------------------------------------------

This file is part of LeMonADE-Viewer.

LeMonADE-Viewer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LeMonADE-Viewer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LeMonADE-Viewer.  If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------*/
#include <string>
#include <iostream>

/*****************************************************************************/
/**
 * @file
 * @brief Implementation of Parser
 * */
/*****************************************************************************/
#include "LeMonADE-Viewer/LineParser.h"

/*****************************************************************************/
//constructor and destructor
LineParser::LineParser()
  //:stream(inputStream)
{}

LineParser::~LineParser(){}
/*****************************************************************************/

/*****************************************************************************/
//finds the next Read in the stream and returns the Readstring
string LineParser::findRead(string line)
{
 // string parsedLine;


  if(!line.empty() && line.size()>1){
    bool ReadFound=(line.at(0)=='!' || (line.at(0)=='#' && line.at(1)=='!'));

    if(ReadFound){
      size_t length;
      //look for = sign
      length=line.find(":");
      if (length==string::npos){
    	  //no match
	//stream.seekg(linestart);
	//stream>>Read;
	return line;
      }
      else{
    	  return line.substr (0,length);
	//stream.seekg(linestart);
	//getline(stream,Read,'=');
	//return Read;
      }

    }
    }


  return line;
}
