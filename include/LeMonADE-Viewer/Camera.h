/*--------------------------------------------------------------------------------
 _______________
|   /       \   | L   attice-based  | LeMonADE-Viewer:
|  /   ooo   \  | e   xtensible     | ----------------
| /  o\.|./o  \ | Mon te-Carlo      | An Open Source Visualization Tool for
|/  o\.\|/./o  \| A   lgorithm and  | for BFM-files generated by LeMonADE-software.
|  oo---0---oo  | D   evelopment    | See: https://github.com/LeMonADE-project/LeMonADE
|\  o/./|\.\o  /| E   nvironment    |
| \  o/.|.\o  / | -                 |
|  \   ooo   /  | Viewer            | Copyright (C) 2013-2015 by
|___\_______/___|                   | LeMonADE-Viewer Principal Developers (see AUTHORS)
----------------------------------------------------------------------------------

This file is part of LeMonADE-Viewer.

LeMonADE-Viewer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LeMonADE-Viewer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LeMonADE-Viewer.  If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------*/

#pragma once

#include <math.h>

#include <LeMonADE/utility/Vector3D.h>

/**
 * @file
 *
 * @class Camera.h
 *
 * @brief Simplistic camera for handling all user-mouse-keyboard interactions.
 *
 *
 **/
class Camera {

public:
  Camera();
  virtual ~Camera();

  float getCamXPos() const;
  float getCamYPos() const;
  float getCamZPos() const;

  float getCamAngleYaw() const;
  float getCamAnglePitch() const;
  float getCamAngleRoll() const;

  float getCamCenterXPos() const;
  float getCamCenterYPos() const;
  float getCamCenterZPos() const;

  float getCamXSpeed() const;
  float getCamYSpeed() const;
  float getCamZSpeed() const;

  float getMovementSpeedFactor() const;

  bool getHoldingForwardI() const;
  bool getHoldingBackwardO() const;
  bool getHoldingUpW() const;
  bool getHoldingDownS() const;
  bool getHoldingLeftA() const;
  bool getHoldingRightD() const;

  bool getHoldingMouseButtonLeft() const;

  float getHoldingForwardMouse () const;
  float getHoldingBackwardMouse () const;

  void setCamXPos(float camXPos = 0.0f);
  void setCamYPos(float camYPos = 0.0f);
  void setCamZPos(float camZPos = 0.0f);

  void setCamCenterXPos(float camCenterXPos = 0.0f);
  void setCamCenterYPos(float camCenterYPos = 0.0f);
  void setCamCenterZPos(float camCenterZPos = 0.0f);

  void setCamAngleYaw(float camAngleYaw = 0.0f);
  void setCamAnglePitch(float camAnglePitch = 0.0f);
  void setCamAngleRoll(float camAngleRaw = 0.0f);

  void setCamAngleYawSpeed(float camAngleYawSpeed = 0.0f);
  void setCamAnglePitchSpeed(float camCamAnglePitchSpeed = 0.0f);
  void setCamAngleRollSpeed(float camCamAngleRollSpeed = 0.0f);

  void setCamXSpeed(float camXSpeedParam = 0.0f);
  void setCamYSpeed(float camYSpeedParam = 0.0f);
  void setCamZSpeed(float camZSpeedParam = 0.0f);

  void setMovementSpeedFactor(float movementSpeedFactorParam = 1.0f);

  void setHoldingForwardI(bool holdingForwardIParam = false);
  void setHoldingBackwardO(bool holdingBackwardOParam = false);
  void setHoldingUpW(bool holdingUpWParam = false);
  void setHoldingDownS(bool holdingDownSParam = false);
  void setHoldingLeftA(bool holdingLeftAParam = false);
  void setHoldingRightD(bool holdingRightDParam = false);

  void setHoldingMouseButtonLeft(bool holdingMouseButtonLeftParam = false);

  void setHoldingForwardMouse(float holdingForwardMouseParam = 0.0f);
  void setHoldingBackwardMouse(float holdingBackwardMouseParam = 0.0f);

  void calculateCameraMovement();
  void moveCamera();
  void handleMouseMove(int, int, int, int, int);

  float toRads(const float);

private:

  VectorFloat3 CamPosition;
  VectorFloat3 CamSpeedMovement;

  VectorFloat3 CamCenter;

  float CamAngleYaw;
  float CamAngleYawSpeed;

  float CamAnglePitch;
  float CamAnglePitchSpeed;

  float CamAngleRoll;
  float CamAngleRollSpeed;


  float movementSpeedFactor;

  bool holdingForwardI;
  bool holdingBackwardO;
  bool holdingUpW;
  bool holdingDownS;
  bool holdingLeftA;
  bool holdingRightD;

  bool holdingMouseButtonLeft;

  float holdingForwardMouse;
  float holdingBackwardMouse;


};
