/*--------------------------------------------------------------------------------
 _______________
|   /       \   | L   attice-based  | LeMonADE-Viewer:
|  /   ooo   \  | e   xtensible     | ----------------
| /  o\.|./o  \ | Mon te-Carlo      | An Open Source Visualization Tool for
|/  o\.\|/./o  \| A   lgorithm and  | for BFM-files generated by LeMonADE-software.
|  oo---0---oo  | D   evelopment    | See: https://github.com/LeMonADE-project/LeMonADE
|\  o/./|\.\o  /| E   nvironment    |
| \  o/.|.\o  / | -                 |
|  \   ooo   /  | Viewer            | Copyright (C) 2013-2015 by
|___\_______/___|                   | LeMonADE-Viewer Principal Developers (see AUTHORS)
----------------------------------------------------------------------------------

This file is part of LeMonADE-Viewer.

LeMonADE-Viewer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LeMonADE-Viewer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LeMonADE-Viewer.  If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------*/

#pragma once

/*****************************************************************************/
/**
 * @file
 * @brief Definition of class Parser
 * */
/*****************************************************************************/
#include <string>
#include <fstream>
#include <iostream>

using namespace std;
/*****************************************************************************/
/**
 * @class LineParser
 *
 * @brief Basic parser for line in Viewer
 *
/*****************************************************************************/
class LineParser
{
public:

	 LineParser();
	 ~LineParser();

  /**
   * @brief Finds the next bfm-Read (beginning with ! or #!) in the file and leaves the get pointer behind the Read
   * @return the ReadString e.g. the keyword/command/user-command
   */
  string findRead(string line);

private:
  //! Stream to be parsed
 // istream& stream;
};
